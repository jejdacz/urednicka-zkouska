{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["Answer","text","onClick","selected","valid","className","classnames","invalid","Question","initialState","status","currentQuestionIndex","selectedAnswer","showRight","showControls","learnedLimit","availableQuestionsIndexes","exam","questions","map","e","i","stats","answers","Array","length","fill","rightAnswers","totalAnswers","removedQuestions","App","useState","state","setState","useEffect","localStorage","JSON","parse","console","log","s","pickQuestionIndex","stringify","saveState","slice","filter","setTimeout","Math","floor","random","handleAnswer","classNames","toFixed","question","q","iq","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e161ff0f.chunk.js","sourcesContent":["import { useEffect, useState, memo } from 'react';\nimport classnames from 'classnames';\nimport './App.scss';\nimport exam from './exam.json';\nimport classNames from 'classnames';\n\nconst Answer = ({ text, onClick, selected, valid }) => {\n  return (\n    <div\n      className={classnames('answer', 'button', {\n        selected,\n        valid,\n        invalid: !valid\n      })}\n      onClick={onClick}>\n      {text}\n    </div>\n  );\n};\n\nconst Question = ({ text }) => <div className='question'>{text}</div>;\n\n//exam.questions = exam.questions.splice(0, 3);\n\nconst initAvailableQuestionsIndexes = exam.questions.map((e, i) => i);\n\nconst initialState = {\n  status: 'init',\n  currentQuestionIndex: null,\n  selectedAnswer: null,\n  showRight: false,\n  showControls: false,\n  learnedLimit: 5,\n  availableQuestionsIndexes: initAvailableQuestionsIndexes,\n  stats: {\n    answers: new Array(exam.questions.length).fill(0),\n    rightAnswers: 0,\n    totalAnswers: 0,\n    removedQuestions: 0\n  }\n};\n\nconst loadState = () =>\n  localStorage.state ? JSON.parse(localStorage.state) : null;\nconst saveState = state => {\n  localStorage.state = JSON.stringify(state);\n  return state;\n};\n\nconst App = () => {\n  const [state, setState] = useState(initialState);\n\n  useEffect(() => {\n    // load local stats\n    const state = loadState() ?? { status: 'loaded' };\n    console.log('loading state from localstorage');\n    setState(s => ({ ...s, ...state }));\n  }, []);\n\n  useEffect(() => {\n    if (state.status === 'loaded') {\n      setState(s => ({\n        ...s,\n        currentQuestionIndex: pickQuestionIndex(),\n        status: 'ready'\n      }));\n    } else if (state.status === 'ready') {\n      saveState(state);\n    } else if (state.status === 'right') {\n      // calculate stats here\n\n      setState(s => {\n        const answers = s.stats.answers.slice();\n        answers[s.currentQuestionIndex]++;\n\n        return {\n          ...s,\n          availableQuestionsIndexes:\n            answers[s.currentQuestionIndex] >= state.learnedLimit\n              ? s.availableQuestionsIndexes.filter(\n                  e => e !== s.currentQuestionIndex\n                )\n              : s.availableQuestionsIndexes,\n          stats: {\n            ...s.stats,\n            answers,\n            rightAnswers: s.stats.rightAnswers + 1,\n            totalAnswers: s.stats.totalAnswers + 1\n          }\n        };\n      });\n      setTimeout(\n        () => setState(s => ({ ...s, status: 'showRight', showRight: true })),\n        500\n      );\n    } else if (state.status === 'wrong') {\n      // calculate stats here\n      setState(s => ({\n        ...s,\n        stats: { ...s.stats, totalAnswers: s.stats.totalAnswers + 1 }\n      }));\n      setTimeout(\n        () => setState(s => ({ ...s, status: 'showRight', showRight: true })),\n        500\n      );\n    } else if (state.status === 'showRight') {\n      // handle victory\n      state.availableQuestionsIndexes.length > 0\n        ? setTimeout(\n            () => setState(s => ({ ...s, status: 'waitingForClick' })),\n            500\n          )\n        : setState(s => ({ ...s, status: 'victory' }));\n    } else if (state.status === 'goingNext') {\n      setTimeout(\n        () =>\n          setState(s => ({\n            ...s,\n            showRight: false,\n            selectedAnswer: null,\n            currentQuestionIndex: pickQuestionIndex(),\n            status: 'ready'\n          })),\n        500\n      );\n    }\n  }, [state.status]);\n\n  const pickQuestionIndex = () =>\n    state.availableQuestionsIndexes[\n      Math.floor(Math.random() * state.availableQuestionsIndexes.length)\n    ];\n\n  const handleAnswer = i => () => {\n    if (state.status === 'ready')\n      exam.questions[state.currentQuestionIndex].answers[i].valid\n        ? setState(s => ({ ...s, selectedAnswer: i, status: 'right' }))\n        : setState(s => ({ ...s, selectedAnswer: i, status: 'wrong' }));\n  };\n\n  const handleAppClick = () => {\n    if (state.status === 'waitingForClick') {\n      setState(s => ({ ...s, status: 'goingNext' }));\n    }\n  };\n\n  const handleShowAllClick = () => {\n    state.status !== 'showAll'\n      ? setState(s => ({ ...s, showRight: true, status: 'showAll' }))\n      : setState(s => ({ ...s, showRight: false, status: 'ready' }));\n  };\n\n  const renderQuestion = () =>\n    state.status === 'ready' ||\n    state.status === 'wrong' ||\n    state.status === 'right' ||\n    state.status === 'showRight' ||\n    state.status === 'waitingForClick' ||\n    state.status === 'goingNext' ? (\n      <div\n        className={classNames('question-wrapper', {\n          'going-next': state.status === 'goingNext'\n        })}>\n        <Question text={exam.questions[state.currentQuestionIndex].question} />\n        {exam.questions[state.currentQuestionIndex].answers.map((e, i) => (\n          <Answer\n            key={i}\n            text={e.text}\n            onClick={handleAnswer(i)}\n            selected={state.selectedAnswer === i || state.showRight}\n            valid={e.valid}\n          />\n        ))}\n      </div>\n    ) : null;\n\n  const renderAll = () =>\n    state.status === 'showAll' ? (\n      <>\n        {exam.questions.map((q, iq) => (\n          <div key={iq} className='question-wrapper'>\n            <Question key={iq} text={`${q.id}. ${q.question}`} />\n            {q.answers.map((e, i) => (\n              <Answer\n                key={`${iq}-${i}`}\n                text={e.text}\n                selected={e.valid}\n                valid={e.valid}\n              />\n            ))}\n          </div>\n        ))}\n      </>\n    ) : null;\n\n  return (\n    <div\n      className={classNames('app', {\n        'waiting-for-click': state.status === 'waitingForClick'\n      })}\n      onClick={handleAppClick}>\n      <div className='status-bar'>\n        <div className='wrapper'>\n          <div className='button answers-right'>\n            {`r: ${state.stats.rightAnswers}`}\n          </div>\n          <div className='button answers-total'>\n            {`tot: ${state.stats.totalAnswers}`}\n          </div>\n          <div className='button answers-ratio'>\n            {`r/t: ${(\n              state.stats.rightAnswers / state.stats.totalAnswers\n            ).toFixed(2)}`}\n          </div>\n          <div className='button answers-remaining'>\n            {`rem: ${state.availableQuestionsIndexes.length}`}\n          </div>\n          <div className='button primary' onClick={handleShowAllClick}>\n            {state.status === 'showAll' ? 'practice' : 'show all'}\n          </div>\n        </div>\n      </div>\n      {renderQuestion()}\n      {state.status === 'victory' && (\n        <div className='victory-wrapper'>\n          <h1 className='sign'>VICTORY!</h1>\n        </div>\n      )}\n      {state.showControls && (\n        <div className='controls'>\n          <div className='button'>&lt;</div>\n          <div className='button'>&gt;</div>\n        </div>\n      )}\n      {renderAll()}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}